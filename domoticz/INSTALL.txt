
Usage: Domoticz [-www <port>]  [-verbose <0|1>]
                -www <port>   Default is: -www 8080
                -verbose <0|1> (0 is none, 1 is debug)   Default is: -verbose 0
Examples:
                Domoticz            (this is the same as Domoticz -www 8080 -verbose 0)
				Domoticz -www 81 -verbose 1

If Domoticz and the browser are running on the same system you can connect with http://localhost:8080/
To stop the application: press Ctrl-C in the application screen (not in the browser)

Compatible browsers:
- Chrome/Firefox/Safari...
- Internet Explorer version 10+

Compiling from source code:
------------------------------------------

Prerequisites: (or in other words, setup your compile enviroment): 

Windows:
- VS2010 (headers can be modified to support a less version)
- boost libraries, you probably have to set the correct include/lib folder in the project properties as i did not bootstrap mine

------------------------------------------------------------------------------------------------
Ubuntu / Raspberry Pi (wheezy):
sudo apt-get install build-essential -y
sudo apt-get install cmake libboost-dev libboost-thread-dev libboost-system-dev libsqlite3-dev subversion

Raspberry Pi (wheezy, 22 November 2012): (First time compile time: 18 minutes)
At this moment (First generation RPi (128MB) (And possible the last generation too), there is a issue with the FTDI drivers (USB).
A quick fix it to add the following in front of /boot/cmdline.txt
dwc_otg.speed=1
This will cause the USB to switch back to version 1.1, but also the network speed is reduced a lot! (not that i want to use 80mbps)
When using the Arch Linux image, it looks like you do not have to apply the above fix.

------------------------------------------------------------------------------------------------
Raspberry Pi (Arch Linux):
sudo pacman -S gcc cmake subversion boost sqlite make

------------------------------------------------------------------------------------------------
Debian (Mac OS)
Mac OS Installation:
Prerequistics:
- XCode with Command Line Tools
- macports

sudo port install cmake
sudo port install boost

------------------------------------------------------------------------------------------------
Synology: (Initial setup time is 30 minutes)
- Make sure the device is bootstrapped, then:
ipkg install gcc
ipkg install make
ipkg install optware-devel (dont worry about the wget-ssl error)
ipkg install boost-dev
ipkg install boost-thread
ipkg install boost-system
ipkg install boost-date-time

download/install cmake (take a coffee while doing the bootstrap and make commands)
wget http://www.cmake.org/files/v2.8/cmake-2.8.10.tar.gz
tar xvf cmake-2.8.10.tar.gz
cd cmake-2.8.10
./bootstrap
make
make install
cd ..
rm -R cmake-2.8.10
rm cmake-2.8.10.tar.gz

fix known pthread problem:

1) backup the pthread libraries found in /opt/arm-none-linux-gnueabi/lib/ :
mkdir /opt/arm-none-linux-gnueabi/lib_disabled
mv /opt/arm-none-linux-gnueabi/lib/libpthread* /opt/arm-none-linux-gnueabi/lib_disabled

2) Copy the pthread libraries found in /opt/lib
cp /lib/libpthread.so.0 /opt/arm-none-linux-gnueabi/lib/
cd /opt/arm-none-linux-gnueabi/lib/
ln -s libpthread.so.0 libpthread.so
ln -s libpthread.so.0 libpthread-2.5.so

3)
cp /opt/lib/libboost_* /lib

verify http://forum.synology.com/enu/viewtopic.php?p=185512#p185512
to check your /root/.profile

goto the root folder again for the next steps
cd /root
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

Getting the source code:
svn checkout svn://svn.code.sf.net/p/domoticz/code/domoticz

cd domoticz

cmake CMakeLists.txt
make

now you should have the binary application, you can start it with
./domoticz

For additional parameters type:
./domoticz -h

Note: Compiling on the Raspberry Pi will take about 15 minutes

To Update to a newer version:
- stop the application (control-c), or stop the startup script (see below) with /etc/init.d/domoticz.sh stop

(from the domoticz folder)

svn update
cmake CMakeLists.txt
make

Unix startup script:
To start Domoticz automatically when the system starts perform the following steps:

sudo cp domoticz.sh /etc/init.d
sudo chmod +x /etc/init.d/domoticz.sh

Edit the startup script and point the DEAMON location to point to the installation folder:
sudo vi /etc/init.d/domoticz.sh

DAEMON=/home/pi/domoticz/domoticz

If you want to use another web interface port change:

OPTIONS="-www 8080"

You can now start domoticz with:
/etc/init.d/domoticz.sh start

To stop:
/etc/init.d/domoticz.sh stop

To check if domoticz is running:
/etc/init.d/domoticz.sh status
